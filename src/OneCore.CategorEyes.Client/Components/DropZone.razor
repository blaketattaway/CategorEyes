@using BlazorInputFile
@inject IJSRuntime jsRuntime
@inject NotificationService NotificationService
<div class="row">
    <div class="col-12 p-0">
        <div class="dropzone @DropClass rounded">
            <BlazorInputFile.InputFile id="fileInput" multiple title=""
                                       OnChange="HandleFileInputChange"
                                       accept="@AcceptedFileTypes"
                                       @ondragenter="HandleDragEnter"
                                       @ondragleave="HandleDragLeave" />
            @HelpText
        </div>
    </div>
</div>

@code {
    private const int MaxFileSizeMB = 5;
    const int MaxFileSize = MaxFileSizeMB * 1024 * 1024; // 5MB
    private string dropClass = string.Empty;
    private List<IFileListEntry> selectedFiles = new List<IFileListEntry>();

    /// <summary>
    /// Gets or sets the accepted file types for the input. Defaults to accepting all file types.
    /// </summary>
    [Parameter]
    public string AcceptedFileTypes { get; set; } = "*/*";

    /// <summary>
    /// Gets or sets the error notification message displayed when an invalid file is selected. Defaults to an empty string.
    /// </summary>
    [Parameter]
    public string ErrorNotification { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the maximum number of files that can be selected. Defaults to 1.
    /// </summary>
    [Parameter]
    public int MaxFiles { get; set; } = 1;

    /// <summary>
    /// Gets or sets the help text displayed in the drop zone. Defaults to a generic drag-and-drop message.
    /// </summary>
    [Parameter]
    public string HelpText { get; set; } = Resource.GenericDragNDropMessage;

    /// <summary>
    /// Gets or sets the callback event that is triggered when files are selected.
    /// </summary>
    [Parameter]
    public EventCallback<List<IFileListEntry>> OnFileSelect { get; set; }

    private string DropClass => dropClass;

    /// <summary>
    /// Handles the drag enter event by applying a CSS class to indicate an active drag state.
    /// </summary>
    private void HandleDragEnter() => dropClass = "dropzone-drag";

    /// <summary>
    /// Handles the drag leave event by removing the CSS class that indicates an active drag state.
    /// </summary>
    private void HandleDragLeave() => dropClass = string.Empty;

    /// <summary>
    /// Handles file input changes by validating the selected files and invoking the OnFileSelect event for valid files.
    /// </summary>
    /// <param name="files">The selected files, of type <see cref="IFileListEntry[]"/>.</param>
    private async void HandleFileInputChange(IFileListEntry[] files)
    {
        if (files.Length > MaxFiles)
        {
            NotifyMaxFilesExceeded();
            return;
        }

        dropClass = string.Empty;

        foreach (var file in files.Take(MaxFiles))
        {
            if (IsValidFile(file))
            {
                selectedFiles.Add(file);
            }
            else
            {
                NotifyError();
            }
        }

        if (selectedFiles.Any())
        {
            await OnFileSelect.InvokeAsync(selectedFiles);
            selectedFiles.Clear();
        }
     }

    /// <summary>
    /// Validates a file based on its size and type.
    /// </summary>
    /// <param name="file">The file to validate, of type <see cref="IFileListEntry"/>.</param>
    /// <returns><c>true</c> if the file is valid; otherwise, <c>false</c>.</returns>
    private bool IsValidFile(IFileListEntry file) => file.Size <= MaxFileSize && AcceptedFileTypes.Split(',').Contains(file.Type);

    /// <summary>
    /// Notifies the user when the maximum number of files has been exceeded.
    /// </summary>
    private void NotifyMaxFilesExceeded() => NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = nameof(NotificationSeverity.Error), Detail = Resource.MaxNumberOfFilesSurpassed });

    /// <summary>
    /// Notifies the user of an error when a file does not meet the validation criteria.
    /// </summary>
    private void NotifyError() => NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = nameof(NotificationSeverity.Error), Detail = ErrorNotification });
}
