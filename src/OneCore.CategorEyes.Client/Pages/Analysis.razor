@using BlazorInputFile;
@using OneCore.CategorEyes.Client.Components
@using System.Text.Json;
@inject DialogService DialogService
@inject NotificationService NotificationService
@page "/"

<div class="container">
    <div class="row">
        <div class="col-12 mb-4">
            @Resource.AnalysisMessage
        </div>
    </div>
    <DropZone AcceptedFileTypes="@ACCEPTED_FILE_TYPES" ErrorNotification="@Resource.AnalysisFileErrorMessage" OnFileSelect="@SendToAnalyze" HelpText="@Resource.AnalysisDragNDropMessage" />
</div>


@code {
    const int MAX_FILE_SIZE = 5242880;
    const string ACCEPTED_FILE_TYPES = "image/png,image/jpeg,application/pdf";
    const string PDF_FILE_TYPE = "application/pdf";
    const string IMAGE_FILE_TYPE = "image";

    private async Task SendToAnalyze(List<IFileListEntry> files)
    {
        try
        {
            var file = files.FirstOrDefault();
            var ms = await file.ReadAllAsync(MAX_FILE_SIZE);
            var fileBytes = ms.ToArray();
            string base64 = Convert.ToBase64String(fileBytes);

            var request = new AnalysisRequest
                    {
                        Base64File = base64,
                        FileTypeName = file!.Type,
                        FileType = GetFileType(file.Type)
                    };

            var analysisResponse = await new RestConsumer(BaseAPI.CategorEyes).PostResponse<AnalysisResponse, AnalysisRequest>(Endpoints.ANALYSIS, request);

            switch (analysisResponse?.DocumentType)
            {
                case DocumentType.Invoice:
                    var invoiceData = JsonSerializer.Deserialize<Invoice>(analysisResponse.Data);
                    await ShowInvoiceDialog(invoiceData, analysisResponse.AdditionalData);
                    break;
                case DocumentType.GeneralText:
                    var generalTextData = JsonSerializer.Deserialize<GeneralText>(analysisResponse.Data);
                    await ShowGeneralDataDialog(generalTextData, analysisResponse.AdditionalData);
                    break;
                case DocumentType.Other:
                    await ShowOtherDialog(analysisResponse.AdditionalData);
                    break;
            }
        }
        catch (Exception)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = Resource.AnErrorOcurred });
        }
    }

    private FileType GetFileType(string fileType)
    {
        if (fileType == PDF_FILE_TYPE)
        {
            return FileType.Pdf;
        }
        else if (fileType.Contains(IMAGE_FILE_TYPE))
        {
            return FileType.Image;
        }
        return FileType.Unknown;
    }

    async Task ShowGeneralDataDialog(GeneralText? generalText, string additionalData)
    {
        await DialogService.OpenAsync(Resource.GeneralText, ds =>
    @<div>
        @Resource.Description: @(generalText?.Description ?? string.Empty)<br />
        @Resource.Summary: @(generalText?.Summary ?? string.Empty)<br />
        @Resource.Sentiment: @(generalText?.Sentiment ?? string.Empty) <br />
    </div>, new DialogOptions()
          {
              CssClass = "custom-dialog-class",
              WrapperCssClass = "custom-dialog-wrapper-class"
          });
    }

    async Task ShowInvoiceDialog(Invoice? invoice, string additionalData)
    {
        await DialogService.OpenAsync(Resource.Invoice, ds =>
    @<div>
        @Resource.Client: @(invoice?.ClientInfo ?? string.Empty)<br />
        @Resource.Provider: @(invoice?.ProviderInfo ?? string.Empty)<br />
        @Resource.Date: @(invoice?.Date ?? string.Empty) <br />
        @Resource.Products: <br />
        @foreach (var product in invoice?.Products ?? new List<Product>())
        {
            <div>
                @Resource.Name: @(product.ProductName ?? string.Empty) <br />
                @Resource.Quantity: @(product.Quantity.ToString() ?? string.Empty) <br />
                @Resource.Price: @(product.UnitPrice.ToString() ?? string.Empty) <br />
                @Resource.Total: @(product.Total.ToString() ?? string.Empty) <br />
            </div>
        }
        @Resource.Total: @(invoice?.Total.ToString() ?? string.Empty) <br />
        @Resource.AdditionalData: @(additionalData ?? string.Empty)
    </div>, new DialogOptions()
          {
              CssClass = "custom-dialog-class",
              WrapperCssClass = "custom-dialog-wrapper-class"
          });
    }

    async Task ShowOtherDialog(string additionalData)
    {
        await DialogService.OpenAsync("Unidentified", ds =>
    @<div>
        @Resource.Description: @additionalData<br />
    </div>, new DialogOptions()
          {
              CssClass = "custom-dialog-class",
              WrapperCssClass = "custom-dialog-wrapper-class"
          });
    }
}