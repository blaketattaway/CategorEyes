@using BlazorInputFile;
@using OneCore.CategorEyes.Client.Components
@using System.Text.Json;
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject RestConsumer RestConsumer
@inject LoadingService LoadingService
@page "/"

<div class="container">
    <div class="row">
        <div class="col-12 mb-4">
            @Resource.AnalysisMessage
        </div>
    </div>
    <DropZone AcceptedFileTypes="@ACCEPTED_FILE_TYPES" ErrorNotification="@Resource.AnalysisFileErrorMessage" OnFileSelect="@SendToAnalyze" HelpText="@Resource.AnalysisDragNDropMessage" />
</div>


@code {
    const int MAX_FILE_SIZE = 5242880;
    const string ACCEPTED_FILE_TYPES = "image/png,image/jpeg,application/pdf";
    const string PDF_FILE_TYPE = "application/pdf";
    const string IMAGE_FILE_TYPE = "image";

    /// <summary>
    /// Initiates the analysis process for the selected files.
    /// </summary>
    /// <param name="files">A list of <see cref="IFileListEntry"/> representing the selected files for analysis.</param>
    /// <returns>An asynchronous task that represents the completion of the file analysis process.</returns>
    private async Task SendToAnalyze(List<IFileListEntry> files)
    {
        try
        {
            var file = files.FirstOrDefault();
            if (file == null) return;

            var base64 = await ReadFileAsBase64(file);

            var request = new AnalysisRequest
            {
                Base64File = base64,
                FileTypeName = file.Type,
                FileType = GetFileType(file.Type)
            };

            LoadingService.StartLoading();
            var analysisResponse = await RestConsumer.PostResponse<AnalysisResponse, AnalysisRequest>(Endpoints.ANALYSIS, request);
            LoadingService.StopLoading();
            await HandleAnalysisResponse(analysisResponse);
        }
        catch (Exception)
        {
            if (LoadingService.IsLoading) LoadingService.StopLoading();
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = Resource.AnErrorOcurred });
        }
    }

    /// <summary>
    /// Reads a file and converts its content to a Base64 encoded string.
    /// </summary>
    /// <param name="file">The <see cref="IFileListEntry"/> representing the file to be read.</param>
    /// <returns>A task that represents the asynchronous read operation, returning the Base64 encoded string of the file content.</returns>
    private async Task<string> ReadFileAsBase64(IFileListEntry file)
    {
        using var ms = await file.ReadAllAsync(MAX_FILE_SIZE);
        return Convert.ToBase64String(ms.ToArray());
    }

    /// <summary>
    /// Determines the type of the file based on its MIME type.
    /// </summary>
    /// <param name="fileType">A string representing the MIME type of the file.</param>
    /// <returns>The determined <see cref="FileType"/> enumeration value.</returns>
    private FileType GetFileType(string fileType)
    {
        return fileType switch
        {
            PDF_FILE_TYPE => FileType.Pdf,
            _ when fileType.Contains(IMAGE_FILE_TYPE) => FileType.Image,
            _ => FileType.Unknown
        };
    }

    /// <summary>
    /// Handles the analysis response by triggering the appropriate dialog based on the document type.
    /// </summary>
    /// <param name="analysisResponse">The <see cref="AnalysisResponse"/> received from the analysis service.</param>
    /// <returns>An asynchronous task that represents the handling of the analysis response.</returns>
    private async Task HandleAnalysisResponse(AnalysisResponse analysisResponse)
    {
        switch (analysisResponse?.DocumentType)
        {
            case DocumentType.Invoice:
                var invoiceData = JsonSerializer.Deserialize<Invoice>(analysisResponse.Data);
                await ShowInvoiceDialog(invoiceData, analysisResponse.AdditionalData);
                break;
            case DocumentType.GeneralText:
                var generalTextData = JsonSerializer.Deserialize<GeneralText>(analysisResponse.Data);
                await ShowGeneralDataDialog(generalTextData, analysisResponse.AdditionalData);
                break;
            case DocumentType.Other:
                await ShowOtherDialog(analysisResponse.AdditionalData);
                break;
            default:
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Warning", Detail = Resource.UnrecognizedDocumentType });
                break;
        }
    }

    /// <summary>
    /// Displays a dialog showing the general text analysis data.
    /// </summary>
    /// <param name="generalText">Optional <see cref="GeneralText"/> data extracted from the analyzed document.</param>
    /// <param name="additionalData">A string containing additional data related to the analysis.</param>
    /// <returns>An asynchronous task that represents the dialog display operation.</returns>
    async Task ShowGeneralDataDialog(GeneralText? generalText, string additionalData)
    {
        await DialogService.OpenAsync(Resource.GeneralText, ds =>
    @<div>
        @Resource.Description: @(generalText?.Description ?? string.Empty)<br />
        @Resource.Summary: @(generalText?.Summary ?? string.Empty)<br />
        @Resource.Sentiment: @(generalText?.Sentiment ?? string.Empty) <br />
    </div>, new DialogOptions()
          {
              CssClass = "custom-dialog-class",
              WrapperCssClass = "custom-dialog-wrapper-class"
          });
    }

    /// <summary>
    /// Displays a dialog showing the invoice analysis data.
    /// </summary>
    /// <param name="invoice">Optional <see cref="Invoice"/> data extracted from the analyzed document.</param>
    /// <param name="additionalData">A string containing additional data related to the analysis.</param>
    /// <returns>An asynchronous task that represents the dialog display operation.</returns>
    async Task ShowInvoiceDialog(Invoice? invoice, string additionalData)
    {
        await DialogService.OpenAsync(Resource.Invoice, ds =>
    @<div>
        @Resource.Client: @(invoice?.ClientInfo ?? string.Empty)<br />
        @Resource.Provider: @(invoice?.ProviderInfo ?? string.Empty)<br />
        @Resource.Date: @(invoice?.Date ?? string.Empty) <br />
        @Resource.Products: <br />
        @foreach (var product in invoice?.Products ?? new List<Product>())
        {
            <div>
                @Resource.Name: @(product.ProductName ?? string.Empty) <br />
                @Resource.Quantity: @(product.Quantity.ToString() ?? string.Empty) <br />
                @Resource.Price: @(product.UnitPrice.ToString() ?? string.Empty) <br />
                @Resource.Total: @(product.Total.ToString() ?? string.Empty) <br />
            </div>
        }
        @Resource.Total: @(invoice?.Total.ToString() ?? string.Empty) <br />
        @Resource.AdditionalData: @(additionalData ?? string.Empty)
    </div>, new DialogOptions()
          {
              CssClass = "custom-dialog-class",
              WrapperCssClass = "custom-dialog-wrapper-class"
          });
    }

    /// <summary>
    /// Displays a dialog for documents that could not be categorized into a specific type, showing any additional data.
    /// </summary>
    /// <param name="additionalData">A string containing additional data related to the analysis.</param>
    /// <returns>An asynchronous task that represents the dialog display operation.</returns>
    async Task ShowOtherDialog(string additionalData)
    {
        await DialogService.OpenAsync("Unidentified", ds =>
    @<div>
        @Resource.Description: @additionalData<br />
    </div>, new DialogOptions()
          {
              CssClass = "custom-dialog-class",
              WrapperCssClass = "custom-dialog-wrapper-class"
          });
    }
}