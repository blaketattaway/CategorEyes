@using System.ComponentModel.DataAnnotations;
@inject NotificationService NotificationService
@page "/historical"

<RadzenButton Text="Reset" Click="@Reset" Style="margin-bottom: 20px;" />
<RadzenButton Text="Export" Click="@ExporToExcel" Style="margin-bottom: 20px; float: right" Icon="description" ButtonStyle="ButtonStyle.Success" />
<RadzenDataGrid @ref="grid" SelectionMode="DataGridSelectionMode.Multiple" KeyProperty="Id" IsLoading="@isLoading" Count="@count" Data="@historicals"
                LoadData="@LoadData" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                FilterMode="FilterMode.Advanced" AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="10"
                PagerHorizontalAlign="HorizontalAlign.Center" TItem="Models.Historical" ColumnWidth="200px" LogicalFilterOperator="LogicalFilterOperator.And" GotoFirstPageOnSort="true">
    <Columns>
        <RadzenDataGridColumn TItem="Models.Historical" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="50px" TextAlign="TextAlign.Center" SortOrder="SortOrder.Ascending" />
        <RadzenDataGridColumn TItem="Models.Historical" Property="HistoricalTypeEnum" Title="Type" Frozen="true" Width="50px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Models.Historical" Property="CreationDate" Title="Date of Creation" Frozen="true" Width="50px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Models.Historical" Property="Description" Title="Description" Frozen="true" Width="50px" TextAlign="TextAlign.Center" />
    </Columns>
    <LoadingTemplate>
        <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </LoadingTemplate>
</RadzenDataGrid>


@code {
    bool isLoading;
    int count;
    ODataEnumerable<Models.Historical> historicals;
    RadzenDataGrid<Models.Historical> grid;
    string? lastFilter;
    const int SKIP = 0;
    const int TAKE = 10;
    const string HISTORICAL_TYPE_PROP_NAME = "HistoricalType";
    const string HISTORICAL_TYPE_ENUM_PROP_NAME = "HistoricalTypeEnum";

    async Task LoadData(LoadDataArgs loadDataArgs)
    {
        isLoading = true;

        try
        {
            var logsResponse = await new RestConsumer(BaseAPI.CategorEyes).PostResponse<LogResponse, LogRequest>(Endpoints.GET_LOGS, new LogRequest
                {
                    Skip = loadDataArgs.Skip ?? SKIP,
                    Take = loadDataArgs.Top ?? TAKE,
                    Sort = GetSort(loadDataArgs)
                });

            logsResponse.Historicals.ForEach(h =>
            {
                h.HistoricalTypeEnum = (HistoricalType)h.HistoricalType;
            });

            historicals = logsResponse.Historicals.AsODataEnumerable<Models.Historical>();
            count = logsResponse.TotalPages;
        }
        catch (Exception)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "An Error Ocurred" });
        }

        isLoading = false;
    }

    private async Task Reset()
    {
        await LoadData(new LoadDataArgs());
        grid.Reset(true);
        await grid.FirstPage(true);
    }

    private SortDescriptor? GetSort(LoadDataArgs loadDataArgs)
    {
        var sort = loadDataArgs.Sorts.FirstOrDefault();

        if (sort is null) return null;

        return new SortDescriptor
        {
            Property = sort.Property.Equals(HISTORICAL_TYPE_ENUM_PROP_NAME) ? HISTORICAL_TYPE_PROP_NAME : sort.Property,
            SortOrder = sort.SortOrder
        };
    }

    private async Task ExporToExcel()
    {
        
    }
}