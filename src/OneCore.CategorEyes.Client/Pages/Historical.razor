@using System.ComponentModel.DataAnnotations
@using System.Text.Json;
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject IJSRuntime JSRuntime
@inject RestConsumer RestConsumer
@inject LoadingService LoadingService
@page "/historical"

<RadzenButton Text="@Resource.Reset" Click="@Reset" Style="margin-bottom: 20px;" Disabled="@isLoading" />
<RadzenButton Text="@Resource.Export" Click="@ExporToExcel" Style="margin-bottom: 20px; float: right" Icon="description" ButtonStyle="ButtonStyle.Success" Disabled="@isLoading" />
<RadzenDataGrid @ref="grid" SelectionMode="DataGridSelectionMode.Multiple" KeyProperty="Id" IsLoading="@isLoading" Count="@count" Data="@historicals"
                LoadData="@LoadData" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                FilterMode="FilterMode.Simple" AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="10"
                PagerHorizontalAlign="HorizontalAlign.Center" TItem="Models.Historical" ColumnWidth="200px" LogicalFilterOperator="LogicalFilterOperator.And" GotoFirstPageOnSort="true">
    <Columns>
        <RadzenDataGridColumn TItem="Models.Historical" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="50px" TextAlign="TextAlign.Center" SortOrder="SortOrder.Ascending" />
        <RadzenDataGridColumn TItem="Models.Historical" Property="HistoricalTypeEnum" Filterable="false" Title="@Resource.Type" Frozen="true" Width="50px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Models.Historical" Property="CreationDate" Filterable="false" Title="@Resource.DateOfCreation" Frozen="true" Width="50px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Models.Historical" Property="Description" Title="@Resource.Description" Frozen="true" Sortable="false" Width="50px" TextAlign="TextAlign.Center" >
            <Template Context="data">
                @switch (data.HistoricalTypeEnum)
                {
                    case HistoricalType.DocumentUpload:
                        <RadzenButton ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="description" class="m-1" Click=@(async () => await JSRuntime.InvokeVoidAsync("open", data.Description, "_blank")) Text="" />
                        break;
                    case HistoricalType.IA:
                        var documentInfo = JsonSerializer.Deserialize<AnalysisResponse>(data.Description);
                        if (documentInfo is not null)
                        {   
                            switch (documentInfo.DocumentType)
                            {
                                case DocumentType.Invoice:
                                    var invoiceData = JsonSerializer.Deserialize<Invoice>(documentInfo.Data);
                                    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="request_quote" class="m-1" Click=@(async () => await JSRuntime.InvokeVoidAsync("open", $"{ URLs.BLOB_STORAGE_URL }{ documentInfo.FileName }", "_blank")) Text="" />
                                    <RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="info" class="m-1" Click=@(async () => await OpenInvoiceDialog(invoiceData, documentInfo.AdditionalData)) Text="" />
                                    break;
                                case DocumentType.GeneralText:
                                    var generalTextData = JsonSerializer.Deserialize<GeneralText>(documentInfo.Data);
                                    <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="description" class="m-1" Click=@(async () => await JSRuntime.InvokeVoidAsync("open", $"{ URLs.BLOB_STORAGE_URL }{ documentInfo.FileName }", "_blank")) Text="" />
                                    <RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="info" class="m-1" Click=@(async () => await ShowGeneralDataDialog(generalTextData, documentInfo.AdditionalData)) Text="" />
                                    break;
                                case DocumentType.Other:
                                    <RadzenButton ButtonStyle="ButtonStyle.Warning" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="help_center" class="m-1" Click=@(async () => await JSRuntime.InvokeVoidAsync("open", $"{ URLs.BLOB_STORAGE_URL }{ documentInfo.FileName }", "_blank")) Text="" />
                                    <RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="info" class="m-1" Click=@(async () =>await ShowOtherDialog(documentInfo.AdditionalData)) Text="" />
                                    break;
                            }
                        }
                        break;
                    case HistoricalType.UserInteraction:
                        @data.Description
                        break;
                }
            </Template>
        </RadzenDataGridColumn>
    </Columns>
    <LoadingTemplate>
        <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </LoadingTemplate>
</RadzenDataGrid>


@code {
    bool isLoading;
    int count;
    ODataEnumerable<Models.Historical> historicals;
    RadzenDataGrid<Models.Historical> grid;
    string? lastFilter;
    const int SKIP = 0;
    const int TAKE = 10;
    const string HISTORICAL_TYPE_PROP_NAME = "HistoricalType";
    const string HISTORICAL_TYPE_ENUM_PROP_NAME = "HistoricalTypeEnum";
    ReportRequest currentRequest;

    /// <summary>
    /// Method invoked when the component is ready to start, used to send a user interaction request to the server.
    /// </summary>
    /// <returns>An asynchronous task that represents the completion of adding user interaction</returns>
    protected override async Task OnInitializedAsync()
    {
        await AddInteraction(UserAction.EnterHistoricalPage);
    }

    /// <summary>
    /// Loads historical data based on provided arguments for filtering, sorting, and pagination.
    /// </summary>
    /// <param name="loadDataArgs">A <see cref="LoadDataArgs"/> instance containing arguments for data loading such as filters, sort orders, and pagination details.</param>
    /// <returns>A task representing the asynchronous operation of data loading.</returns>
    async Task LoadData(LoadDataArgs loadDataArgs)
    {
        isLoading = true;

        try
        {
            SortDescriptor? sort = GetSort(loadDataArgs);

            if (loadDataArgs.Filters != null && loadDataArgs.Filters?.FirstOrDefault()?.FilterValue?.ToString() != null &&  loadDataArgs.Filters?.FirstOrDefault()?.FilterValue?.ToString() != currentRequest.Filter)
                await AddInteraction(UserAction.FilterHistorical);

            currentRequest = new ReportRequest
            {
                Sort = sort,
                Headers = new List<string> { "Id", Resource.Type, Resource.DateOfCreation, "URL", Resource.Description },
                Filter = loadDataArgs.Filters?.FirstOrDefault()?.FilterValue.ToString(),
            };

            var logsResponse = await RestConsumer.PostResponse<LogResponse, LogRequest>(Endpoints.GET_LOGS, new LogRequest
            {
                Skip = loadDataArgs.Skip ?? SKIP,
                Take = loadDataArgs.Top ?? TAKE,
                Sort = sort,
                Filter = loadDataArgs.Filters?.FirstOrDefault()?.FilterValue.ToString(),
            });

            foreach (var historical in logsResponse.Historicals)
            {
                historical.HistoricalTypeEnum = (HistoricalType)historical.HistoricalType;

                switch (historical.HistoricalTypeEnum)
                {
                    case HistoricalType.DocumentUpload:
                        historical.Description = $"{ URLs.BLOB_STORAGE_URL }{ historical.Description }";
                        break;
                    case HistoricalType.IA:
                        break;
                }
            }

            historicals = logsResponse.Historicals.AsODataEnumerable<Models.Historical>();
            count = logsResponse.TotalPages;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = Resource.AnErrorOcurred });
        }

        isLoading = false;
    }

    /// <summary>
    /// Asynchronously adds a user interaction to the system.
    /// </summary>
    /// <param name="userAction">The user action to log, of type <see cref="UserAction"/>.</param>
    /// <returns>A <see cref="Task"/> representing the asynchronous operation without a return value.</returns>
    private async Task AddInteraction(UserAction userAction)
    {
        try
        {
            LoadingService.StartLoading();
            await RestConsumer.PostResponse<object, UserInteractionRequest>(Endpoints.ADD_INTERACTION, new UserInteractionRequest { UserInteractionType = (int)userAction });
            LoadingService.StopLoading();
        }
        catch
        {
            if (LoadingService.IsLoading) LoadingService.StopLoading();
        }
    }


    /// <summary>
    /// Resets the data grid to its initial state and reloads the data.
    /// </summary>
    /// <returns>A task representing the asynchronous operation of resetting and reloading the data grid.</returns>
    private async Task Reset()
    {
        await LoadData(new LoadDataArgs { Skip = SKIP, Top = TAKE });
        grid.Reset(true);
        await grid.FirstPage(true);
    }

    /// <summary>
    /// Extracts the sort descriptor from the data loading arguments.
    /// </summary>
    /// <param name="loadDataArgs">A <see cref="LoadDataArgs"/> instance containing the current state of the data grid including sort information.</param>
    /// <returns>A nullable <see cref="SortDescriptor"/> representing the current sort state of the data grid, or null if no sorting is applied.</returns>
    private SortDescriptor? GetSort(LoadDataArgs loadDataArgs)
    {
        var sort = loadDataArgs.Sorts?.FirstOrDefault();

        if (sort is null) return null;

        return new SortDescriptor
        {
            Property = sort.Property.Equals(HISTORICAL_TYPE_ENUM_PROP_NAME) ? HISTORICAL_TYPE_PROP_NAME : sort.Property,
            SortOrder = sort.SortOrder
        };
    }

    /// <summary>
    /// Initiates the export of historical data to an Excel file.
    /// </summary>
    /// <returns>A task representing the asynchronous operation of exporting data to Excel.</returns>
    private async Task ExporToExcel()
    {
        try
        {
            LoadingService.StartLoading();
            var reportResponse = await RestConsumer.PostResponse<ReportResponse, ReportRequest>(Endpoints.GENERATE_REPORT, currentRequest);
            LoadingService.StopLoading();
            await JSRuntime.InvokeVoidAsync("open", reportResponse.Url);
        }
        catch (Exception)
        {
            if (LoadingService.IsLoading) LoadingService.StopLoading();
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = Resource.AnErrorOcurred });
        }
    }

    /// <summary>
    /// Displays a dialog containing general text data from the analysis.
    /// </summary>
    /// <param name="generalText">An optional <see cref="GeneralText"/> instance containing the data to be displayed in the dialog.</param>
    /// <param name="additionalData">A string containing additional information related to the analysis.</param>
    /// <returns>A task representing the asynchronous operation of displaying the dialog.</returns>
    async Task ShowGeneralDataDialog(GeneralText? generalText, string additionalData)
    {
        await DialogService.OpenAsync<GeneralTextDialog>($"{Resource.GeneralText}",
        new Dictionary<string, object>() { { "GeneralText", generalText }, { "AdditionalData", additionalData } },
        new DialogOptions() { Resizable = true, Draggable = true });
    }

    /// <summary>
    /// Displays a dialog containing invoice data from the analysis.
    /// </summary>
    /// <param name="invoice">An optional <see cref="Invoice"/> instance containing the invoice data to be displayed in the dialog.</param>
    /// <param name="additionalData">A string containing additional information related to the analysis.</param>
    /// <returns>A task representing the asynchronous operation of displaying the dialog.</returns>
    async Task OpenInvoiceDialog(Invoice? invoice, string additionalData)
    {
        await DialogService.OpenAsync<InvoiceDialog>($"{Resource.Invoice}  {invoice.InvoiceNumber ?? string.Empty}",
        new Dictionary<string, object>() { { "Invoice", invoice }, { "AdditionalData", additionalData } }, 
        new DialogOptions() { Resizable = true, Draggable = true });
    }

    /// <summary>
    /// Displays a dialog for documents categorized as "Other" in the analysis, showing any additional data.
    /// </summary>
    /// <param name="additionalData">A string containing additional information related to the analysis.</param>
    /// <returns>A task representing the asynchronous operation of displaying the dialog.</returns>
    async Task ShowOtherDialog(string additionalData)
    {
        await DialogService.OpenAsync<OtherDialog>($"{Resource.UnrecognizedDocumentType}",
        new Dictionary<string, object>() { { "AdditionalData", additionalData } },
        new DialogOptions() { Resizable = true, Draggable = true });
    }
}